"""
Module that contains functions related to createing the Grid EF database
"""

import sqlite3
import os
import csv
import errno
import warnings
import numpy as np
import pandas as pd
warnings.simplefilter(action="ignore", category=FutureWarning)

def make_dir(path):
    """

    Function to check if output path exists
    and create directories if needed
    :param path: directory path
    :return: new directory if one does not previously exists

    """
    try:
        os.makedirs(path)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise

def make_M3GEFP_tables(conn, csv_input_dir, Ecotype_Crop, Ecotype_Shrub, Ecotype_Herb,
                       Ecotype_Tree, grid_ecotype, grid_growth_form, EF):
    """

    Function to load CSV inputs to create primary tables of the M3GEFP database
    :param conn: SQLite database connection
    :param csv_input_dir: Directory of CSV inputs
    :param Ecotype_Crop: input csv file name
    :param Ecotype_Shrub: input csv file name
    :param Ecotype_Herb: input csv file name
    :param Ecotype_Tree: input csv file name
    :param grid_ecotype: input csv file name
    :param grid_growth_form: input csv file name
    :param Vegtype_EF_csv_input: Input CSVs generated by running the M3VTEF database
    :return: A SQLite database with primary tables

    """

    print("Creating M3GEFP DB tables from: %s\n" % csv_input_dir)
    load_table(csv_input_dir + EF, conn, "EF")
    load_table(csv_input_dir + Ecotype_Crop, conn, "SpeciationCrop")
    load_table(csv_input_dir + Ecotype_Shrub, conn, "SpeciationShrub")
    load_table(csv_input_dir + Ecotype_Herb, conn, "SpeciationHerb")
    load_table(csv_input_dir + Ecotype_Tree, conn, "SpeciationTree")
    load_table(csv_input_dir + grid_ecotype, conn, "GridEcotype")
    load_table(csv_input_dir + grid_growth_form, conn, "GridGrowthForm")
    load_table("src/grid_age.csv", conn, "GridStandAge") 

def load_table(inpath, conn, table_name):
    df = pd.read_csv(inpath)
    df.to_sql(table_name, conn, schema='sqlite', if_exists='replace')
    print(f"{table_name} Table Loaded from: %s" % inpath)


def age_function(conn):
    cursor = conn.cursor()
    cursor.execute('ALTER TABLE GridStandAge ADD COLUMN scaled_age_factor FLOAT')
    cursor.execute('UPDATE GridStandAge SET scaled_age_factor = CASE WHEN Age > 0 THEN 0.00012/0.8489 * POWER((Age),2) ELSE 1 END')
    conn.commit()
    print("'Age function' included")


def build_interm_query(growthform, ef_s=1, ef_e=18, ldf_s=3, ldf_e=6):
    """
    Function to build the intermediate query
    """
    query_str = f"CREATE TABLE 'Intermediate{growthform}EcoEF' AS \
                  SELECT Speciation{growthform}.EcoTypeID, "
    
    for i in range(ef_s, ef_e + 1, 1):
        q = f"Sum([EF{i}]*[{growthform}Specfrac]) AS {growthform}EcoEF{i}, "
        query_str += q

    for j in range(ldf_s, ldf_e + 1, 1):
        q2 = f"Sum([LDF{j}]*[{growthform}Specfrac]) AS {growthform}EcoLDF{j}, "
        query_str += q2

    query_str = query_str.rstrip(', ')
    query_str += f" FROM Speciation{growthform} \
                 INNER JOIN EF ON Speciation{growthform}.VegID = EF.VegID \
                 GROUP BY Speciation{growthform}.EcoTypeID;"
    
    return query_str


def Ecotype_Tree_EF(conn, EFa=1, EFz=18, LDFa=3, LDFz=6):
    c = conn.cursor()
    query_str = build_interm_query("Tree",EFa, EFz, LDFa, LDFz)
    c.execute(query_str)
    print("'IntermediateTreeEcoEF' Table Created")


def Ecotype_Shrub_EF(conn,EFa=1, EFz=18, LDFa=3, LDFz=6):
    c = conn.cursor()
    query_str = build_interm_query("Shrub",EFa, EFz, LDFa, LDFz)
    c.execute(query_str)
    print("'IntermediateShrubEcoEF' Table Created")
    
    
def Ecotype_Herb_EF(conn,EFa=1, EFz=18, LDFa=3, LDFz=6):
    c = conn.cursor()
    query_str = build_interm_query("Herb",EFa, EFz, LDFa, LDFz)
    c.execute(query_str)
    print("'IntermediateHerbEcoEF' Table Created")
    

def Ecotype_Crop_EF(conn,EFa=1, EFz=18, LDFa=3, LDFz=6):
    c = conn.cursor()
    query_str = build_interm_query("Crop",EFa, EFz, LDFa, LDFz)
    c.execute(query_str)
    print("'IntermediateCropEcoEF' Table Created")


def build_final_query(ef_s=1, ef_e=18, ldf_s=3, ldf_e=6):
    query_str = "CREATE TABLE 'OutputGridEF' AS \
                SELECT GridGrowthForm.gridID, "
    for i in range(ef_s, ef_e + 1, 1):
        if i == 1:
            q = f"Sum([scaled_age_factor]*[EcotypeFrac]*(([CropFrac]*[CropEcoEF{i}])\
            +([TreeFrac]*[TreeEcoEF{i}])\
            +([HerbFrac]*[HerbEcoEF{i}])\
            +([ShrubFrac]*[ShrubEcoEF{i}]))) AS EF{i}, "
        else:
            q = f"Sum([EcotypeFrac]*(([CropFrac]*[CropEcoEF{i}])\
            +([TreeFrac]*[TreeEcoEF{i}])\
            +([HerbFrac]*[HerbEcoEF{i}])\
            +([ShrubFrac]*[ShrubEcoEF{i}]))) AS EF{i}, "

        query_str += q

    for j in range(ldf_s, ldf_e + 1, 1):
        q2 = f"Sum([EcotypeFrac]*(([CropFrac]*[CropEcoLDF{j}])\
        +([TreeFrac]*[TreeEcoLDF{j}])\
        +([HerbFrac]*[HerbEcoLDF{j}])\
        +([ShrubFrac]*[ShrubEcoLDF{j}]))) AS LDF{j}, "
        query_str += q2

    query_str = query_str.rstrip(', ')
    query_str += " FROM (((((GridGrowthForm INNER JOIN GridEcotype ON GridGrowthForm.gridID = GridEcotype.gridID)  \
    INNER JOIN GridStandAge ON GridEcotype.gridID = GridStandAge.gridID) \
    INNER JOIN IntermediateHerbEcoEF ON GridEcotype.EcotypeID = IntermediateHerbEcoEF.EcoTypeID)                  \
    INNER JOIN IntermediateShrubEcoEF ON IntermediateHerbEcoEF.EcoTypeID = IntermediateShrubEcoEF.EcoTypeID)      \
    INNER JOIN IntermediateTreeEcoEF ON IntermediateShrubEcoEF.EcoTypeID = IntermediateTreeEcoEF.EcoTypeID)       \
    INNER JOIN IntermediateCropEcoEF ON IntermediateTreeEcoEF.EcoTypeID = IntermediateCropEcoEF.EcoTypeID         \
    GROUP BY GridGrowthForm.gridID;"

    return query_str


def grid_EF(conn, EFa=1, EFz=18, LDFa=3, LDFz=6):
    c = conn.cursor()
    query_str = build_final_query(EFa, EFz, LDFa, LDFz)
    c.execute(query_str)
    print("'OutputGridEF' Table Created")
    grid_EF_df = pd.read_sql_query("SELECT * FROM 'OutputGridEF';", conn)
    return grid_EF_df


def run_M3GEFP_DB(db_connection, EFa, EFz, LDFa, LDFz, output_csv_path):
    """
    Function to create M3GEFP database and output the Grid EF table as a CSV
    :param db_connection: Database connection
    :param output_csv_path: Path to CSV output
    :return: A SQLite database and copy of the grid EF table as a CSV file
    """
    # Queries need to be executed in specific order
    # due to dependency of tables generated from previous queries
    print("\n BEGINNING M3GEFP DB GENERATION")
    age_function(db_connection)
    Ecotype_Tree_EF(db_connection,EFa, EFz, LDFa, LDFz)
    Ecotype_Shrub_EF(db_connection,EFa, EFz, LDFa, LDFz)
    Ecotype_Herb_EF(db_connection,EFa, EFz, LDFa, LDFz)
    Ecotype_Crop_EF(db_connection,EFa, EFz, LDFa, LDFz)
    grid_EF_output = grid_EF(db_connection, EFa, EFz, LDFa, LDFz)

    grid_EF_output.to_csv(output_csv_path, index=False)  # Save EF zone table to CSV
    print("grid EF Table CSV Generated: %s" % output_csv_path)
